---

name: ðŸ“¦ Build binary

on: # yamllint disable-line rule:truthy
  release:
    types:
      - published

jobs:
  build-unix:
    runs-on: ubuntu-latest
    name: ðŸ“¦ Build Unix Executables
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64,amd64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Extract version from tag
        id: get_version
        run: |
          if [[ "$GITHUB_REF_NAME" == refs/pull/* ]]; then
            # For pull requests, use "dev" as version
            VERSION="dev"
          else
            # For releases, extract version from tag (remove 'v' prefix if present)
            VERSION=${GITHUB_REF_NAME#v}
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "{\"version\": \"$VERSION\", \"type\":\"bin\"}" > version.json

      - name: Build Docker image for ${{ matrix.platform.os }}-${{ matrix.platform.arch }}
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          load: true
          tags: trap-builder-${{ matrix.platform.os }}-${{ matrix.platform.arch }}:latest
          platforms: linux/${{ matrix.platform.arch }}
          build-args: |
            TARGET_OS=${{ matrix.platform.os }}
            TARGET_ARCH=${{ matrix.platform.arch }}
            VERSION=${{ env.VERSION }}
          cache-from: type=gha,scope=${{ matrix.platform.os }}-${{ matrix.platform.arch }}
          cache-to: type=gha,mode=max,scope=${{ matrix.platform.os }}-${{ matrix.platform.arch }}

      - name: Extract executable
        run: |
          mkdir -p dist
          container_id=$(docker create trap-builder-${{ matrix.platform.os }}-${{ matrix.platform.arch }}:latest)
          docker cp $container_id:/.output/trap ./dist/trap
          docker rm $container_id

      - name: Zip output
        uses: ksm2/archive-action@v1
        with:
          root-directory: dist
          format: "tar.gz"
          name: trap-${{ env.VERSION }}-${{ matrix.platform.os }}-${{ matrix.platform.arch }}

      - name: ðŸ“¤ Upload release assets
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          token: "${{ secrets.TRAP_RELEASE_TOKEN }}"
          files: |
            ./dist/trap-${{ env.VERSION }}-${{ matrix.platform.os }}-${{ matrix.platform.arch }}.zip

  build-windows:
    runs-on: windows-latest
    name: ðŸ“¦ Build Windows (x64)
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, xml, sockets
          coverage: none

      - name: Extract version from tag or set dev version
        id: get_version
        shell: bash
        run: |
          if [[ "$GITHUB_REF" == refs/pull/* ]]; then
            # For pull requests, use "dev" as version
            VERSION="dev"
          else
            # For releases, extract version from tag (remove 'v' prefix if present)
            VERSION=${GITHUB_REF_NAME#v}
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "{\"version\": \"$VERSION\", \"type\":\"bin\"}" > version.json

      - name: Install Composer dependencies
        run: composer install --no-dev --prefer-dist --ignore-platform-reqs

      - name: Create build directories
        run: New-Item -Path ".build\phar", ".build\bin" -ItemType Directory -Force

      - name: Download box tool
        run: |
          Invoke-WebRequest -Uri "https://github.com/box-project/box/releases/download/4.6.6/box.phar" -OutFile ".build/bin/box.phar"

      - name: Download SPC for Windows
        run: |
          Invoke-WebRequest -Uri "https://dl.static-php.dev/static-php-cli/spc-bin/nightly/spc-windows-x64.exe" -OutFile ".build/bin/spc.exe"

      - name: Download required PHP extensions
        run: .build/bin/spc.exe download micro --for-extensions=ctype,dom,filter,libxml,mbstring,phar,simplexml,sockets,tokenizer,xml,xmlwriter --with-php=8.3 --prefer-pre-built

      #   todo: fix this
      #      - name: Install UPX for compression
      #        run: |
      #          .build/bin/spc.exe install-pkg upx

      - name: Verify environment is ready
        run: |
          .build/bin/spc.exe doctor --auto-fix

      - name: Build the self-executable binary
        run: .build/bin/spc.exe build "ctype,dom,filter,libxml,mbstring,phar,simplexml,sockets,tokenizer,xml,xmlwriter" --build-micro # --with-upx-pack

      - name: Build PHAR file
        run: |
          php .build/bin/box.phar compile -v --allow-composer-check-failure

      - name: Combine micro.sfx with the PHAR
        run: |
          New-Item -Path "dist" -ItemType Directory -Force
          .build\bin\spc.exe micro:combine .build\phar\trap.phar --output=dist\trap.exe

      - name: Zip output
        uses: ksm2/archive-action@v1
        with:
          root-directory: dist
          format: "tar.gz"
          name: trap-${{ env.VERSION }}-windows-amd64

#        run: zip -qq -r trap-${{ env.VERSION }}-windows-amd64.zip .
#        working-directory: 'dist'

      - name: ðŸ“¤ Upload release assets
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          token: "${{ secrets.TRAP_RELEASE_TOKEN }}"
          files: |
            ./dist/trap-${{ env.VERSION }}-windows-amd64.zip
